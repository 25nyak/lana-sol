use anchor_lang::prelude::*;
use anchor_spl::token::{self, Token, TokenAccount, Transfer};

declare_id!("YOUR_PROGRAM_ID");

#[program]
mod defi_farming {
    use super::*;
    use std::ops::Deref;

    pub fn initialize(ctx: Context<Initialize>) -> ProgramResult {
        let state = &mut ctx.accounts.state;
        state.authority = *ctx.accounts.authority.key;
        state.last_update_time = Clock::get().unwrap().unix_timestamp;
        Ok(())
    }

    pub fn stake(ctx: Context<Stake>, amount: u64) -> ProgramResult {
        let state = &mut ctx.accounts.state;
        let user_stake = &mut ctx.accounts.user_stake;

        if user_stake.amount > 0 {
            let reward = calculate_reward(user_stake.amount, state.last_update_time)?;
            let seeds = &[state.to_account_info().key.as_ref(), &[state.bump]];
            let signer = &[&seeds[..]];

            token::transfer(
                ctx.accounts.into_transfer_to_user_context().with_signer(signer),
                reward,
            )?;
        }

        token::transfer(ctx.accounts.into_transfer_to_pool_context(), amount)?;

        user_stake.amount += amount;
        state.last_update_time = Clock::get().unwrap().unix_timestamp;

        Ok(())
    }

    pub fn withdraw(ctx: Context<Withdraw>) -> ProgramResult {
        let state = &mut ctx.accounts.state;
        let user_stake = &mut ctx.accounts.user_stake;

        let reward = calculate_reward(user_stake.amount, state.last_update_time)?;
        let total_amount = user_stake.amount + reward;

        let seeds = &[state.to_account_info().key.as_ref(), &[state.bump]];
        let signer = &[&seeds[..]];

        token::transfer(
            ctx.accounts.into_transfer_to_user_context().with_signer(signer),
            total_amount,
        )?;

        user_stake.amount = 0;
        state.last_update_time = Clock::get().unwrap().unix_timestamp;

        Ok(())
    }
}

#[derive(Accounts)]
pub struct Initialize<'info> {
    #[account(init, payer = authority, space = 8 + 32 + 8 + 1)]
    pub state: Account<'info, State>,
    #[account(mut)]
    pub authority: Signer<'info>,
    pub system_program: Program<'info, System>,
    pub rent: Sysvar<'info, Rent>,
}

#[derive(Accounts)]
pub struct Stake<'info> {
    #[account(mut, has_one = authority)]
    pub state: Account<'info, State>,
    #[account(mut)]
    pub user_stake: Account<'info, UserStake>,
    #[account(mut)]
    pub user_token_account: Account<'info, TokenAccount>,
    #[account(mut)]
    pub pool_token_account: Account<'info, TokenAccount>,
    pub authority: Signer<'info>,
    pub token_program: Program<'info, Token>,
}

#[derive(Accounts)]
pub struct Withdraw<'info> {
    #[account(mut, has_one = authority)]
    pub state: Account<'info, State>,
    #[account(mut)]
    pub user_stake: Account<'info, UserStake>,
    #[account(mut)]
    pub user_token_account: Account<'info, TokenAccount>,
    #[account(mut)]
    pub pool_token_account: Account<'info, TokenAccount>,
    pub authority: Signer<'info>,
    pub token_program: Program<'info, Token>,
}

#[account]
pub struct State {
    pub authority: Pubkey,
    pub last_update_time: i64,
    pub bump: u8,
}

#[account]
pub struct UserStake {
    pub amount: u64,
}

impl<'info> Stake<'info> {
    fn into_transfer_to_pool_context(&self) -> CpiContext<'_, '_, '_, 'info, Transfer<'info>> {
        let cpi_accounts = Transfer {
            from: self.user_token_account.to_account_info().clone(),
            to: self.pool_token_account.to_account_info().clone(),
            authority: self.authority.to_account_info().clone(),
        };
        CpiContext::new(self.token_program.to_account_info().clone(), cpi_accounts)
    }

    fn into_transfer_to_user_context(&self) -> CpiContext<'_, '_, '_, 'info, Transfer<'info>> {
        let cpi_accounts = Transfer {
            from: self.pool_token_account.to_account_info().clone(),
            to: self.user_token_account.to_account_info().clone(),
            authority: self.state.to_account_info().clone(),
        };
        CpiContext::new(self.token_program.to_account_info().clone(), cpi_accounts)
    }
}

fn calculate_reward(amount: u64, last_update_time: i64) -> Result<u64, ProgramError> {
    let current_time = Clock::get().unwrap().unix_timestamp;
    let time_elapsed = current_time - last_update_time;

    let reward = amount as u128 * 10 * time_elapsed as u128 / 86400 / 100;
    Ok(reward as u64)
}
